<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net"/>
  </configSections>
  <log4net>
    <!--记录日志到数据库-->
    <appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
      <!--“bufferSize标签”:设置日志信息的缓存大小(当日志信息达到设定值的条数时，自动触发将缓存中的数据写入数据库-->
      <bufferSize value="1" />
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
      <!--设置数据库连接字符串-->
      <connectionString value="data source=127.0.0.1;initial catalog=OA;integrated security=false;persist security info=True;User ID=sa;Password=2012happy" />
      <!--设置日志写入数据库的SQL命令-->
      <commandText value="INSERT INTO t_ADMM_Log ([Date],[Operator],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @Operator,@thread, @log_level, @logger, @message, @exception)" />
      <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />
      </parameter>
      <!--自定义参数相关设置-->
      <parameter>
        <parameterName value="@Operator" />
        <!--设置参数数据类型-->
        <dbType value="String" />
        <!--设置参数值的长度(如果参数数据类型是字符串,则长度表示字符串的个数)-->
        <size value="2" />
        <layout type="log4net.Layout.PatternLayout">
          <!--设置自定义参数对应的参数值-->
          <conversionPattern value="%property{Operator}" />
        </layout>
      </parameter>
      
      <parameter>
        <parameterName value="@thread" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%thread" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@log_level" />
        <dbType value="String" />
        <size value="50" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%level" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="4000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%message" />
        </layout>
      </parameter>
      <parameter>
        <parameterName value="@exception" />
        <dbType value="String" />
        <size value="2000" />
        <layout type="log4net.Layout.ExceptionLayout" />
      </parameter>
    </appender>
    
    <!--把日志信息输出到文件里;"appender标签":指定日志的输出方式-->
    <appender name="FileAppender" type="log4net.Appender.FileAppender">
      <!--文件的位置-->
      <file value="D:\Log4net.log"></file>
      <appendToFile value="true"></appendToFile>
      <!--日志在日志文件中的布局方式-->
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%d:%n%m%n"></conversionPattern>
      </layout>
    </appender>
    <!--记录日志到控制台-->
    <!--
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="[时间]:%d%n[级别]:%p%n[内容]:%m%n%n"></conversionPattern>
      </layout>
    </appender>
    -->
    <root>
      <!--设置日志的最大输出级别，大于该级别的日志无法正常输出-->
      <level value="ALL"></level>
      <!--设置日志输出等级中受影响的"日志输出方式"-->
      <!--
       <appender-ref ref="FileAppender"></appender-ref>   
       <appender-ref ref="ConsoleAppender"></appender-ref>      
      -->    
      <!--设置启用指定的日志输出方式(如果没有显式设置启用的日志输出方式，则关于该日志输出方式的相关设置将不会生效)-->
      <appender-ref ref="AdoNetAppender"></appender-ref>
      <appender-ref ref="FileAppender"></appender-ref>
    </root>
  </log4net>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>
</configuration>